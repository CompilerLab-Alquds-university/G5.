#include <stdio.h>
#include <string.h>

enum TokenType {
  TOKEN_INT,
  TOKEN_FLOAT,
  TOKEN_PLUS,
  TOKEN_MINUS,
  TOKEN_MULTIPLY,
  TOKEN_DIVIDE,
  TOKEN_EOF
};

struct Token {
  enum TokenType type;
  union {
    int int_value;
    float float_value;
  };
};

struct Lexer {
  char* input;
  int pos;
  struct Token current_token;
};

void init_lexer(struct Lexer* lexer, char* input) {
  lexer->input = input;
  lexer->pos = 0;
  lexer->current_token = (struct Token) { TOKEN_EOF, { 0 } };
}

void skip_whitespace(struct Lexer* lexer) {
  while (lexer->input[lexer->pos] == ' ' || lexer->input[lexer->pos] == '\t') {
    lexer->pos++;
  }
}

void next_token(struct Lexer* lexer) {
  skip_whitespace(lexer);

  if (isdigit(lexer->input[lexer->pos])) {
    int value = 0;
    while (isdigit(lexer->input[lexer->pos])) {
      value = value * 10 + (lexer->input[lexer->pos] - '0');
      lexer->pos++;
    }
    lexer->current_token = (struct Token) { TOKEN_INT, { value } };
  } else if (lexer->input[lexer->pos] == '+') {
    lexer->current_token = (struct Token) { TOKEN_PLUS, { 0 } };
    lexer->pos++;
  } else if (lexer->input[lexer->pos] == '-') {
    lexer->current_token = (struct Token) { TOKEN_MINUS, { 0 } };
    lexer->pos++;
  } else if (lexer->input[lexer->pos] == '*') {
    lexer->current_token = (struct Token) { TOKEN_MULTIPLY, { 0 } };
    lexer->pos++;
  } else if (lexer->input[lexer->pos] == '/') {
    lexer->current_token = (struct Token) { TOKEN_DIVIDE, { 0 } };
    lexer->pos++;
  } else {
    lexer->current_token = (struct Token) { TOKEN_EOF, { 0 } };
  }
}

int main(int argc, char** argv) {
  struct Lexer lexer;
  init_lexer(&lexer, "3 + 4 * 5");

  next_token(&lexer);
  while (lexer.current_token.type != TOKEN_EOF) {
    printf("Type: %d, Value: %d\n", lexer.current_token.type, lexer.current_tokenv)
